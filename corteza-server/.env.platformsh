# Statements in this file will be executed (sourced) by the shell in SSH
# sessions, in deploy hooks, in cron jobs, and in the application's runtime
# environment. This file must be placed in the root of the application, not
# necessarily the git repository's root. In case of multiple applications,
# each application can have its own .environment file.

# This file will be copied to `.environment` in the build hook.

export PATH=/app/bin:$PATH

################################################################################
# SMTP Configuration
#
# Check to see if the $PLATFORM_SMTP_HOST variable is set. If it is, set Corteza's
# corresponding variable, $SMTP_HOST.

if [ ! -z "${PLATFORM_SMTP_HOST}" ]; then
    export SMTP_HOST="${PLATFORM_SMTP_HOST}"
fi

# Check to see if the below variable has been set via the web management console.
# If it hasn't, use the one provided here. The .environment file has the last
# word on what environment variables get set, so anything that gets set here would
# override something set via the Console or CLI.

if [ -z "${SMTP_FROM}" ]; then
    export SMTP_FROM="\"Corteza\" <info@local.cortezaproject.org>"
fi

################################################################################
# JWT Configuration
#
# Sensitive variables don't even need to be set in this file! By using the web
# console, you can set a variable marked as "sensitive" that is only accessible
# to the application itself.
#
# Below, we can set a random token for use on all NON-MASTER environments. The
# implication here is that the token for the master environment will be non-inheritable
# and set via the Console or CLI.
#
# This will also run if no AUTH_JWT_SECRET variable has been set at all on Master.

if [ "${PLATFORM_BRANCH}" != "master" || -z "$AUTH_JWT_SECRET" ]; then
    export AUTH_JWT_SECRET=$(head -c 500 /dev/urandom | gtr -dc 'a-zA-Z0-9' | head -c 30)
fi

# JWT expiration (default 30 days)
# export AUTH_JWT_EXPIRY=

################################################################################
# Logging configuration
# Values: debug, info, warn, error, panic, fatal
#
# Here we can set the log level on all NON-MASTER environments to be `debug`.
# This means that on any development branch, debug logging will be automatically activated.
#
# For the master branch, we can use `export LOG_LEVEL=${LOG_LEVEL:-"info"}` to avoid
# overriding any variables that were set via the Console or CLI.

if [ "${PLATFORM_BRANCH}" != "master" ]; then
    export LOG_LEVEL="debug"
else
    export LOG_LEVEL=${LOG_LEVEL:-"info"}
fi

###############################################################################
# HTTP configuration

# Set address to listen on
export HTTP_ADDR="0.0.0.0:${PORT}"

# Timeout for internal HTTP client
export HTTP_CLIENT_TIMEOUT=${HTTP_CLIENT_TIMEOUT:-"30s"}

# Allow usage of insecure hosts (self-signed, expired certificates)
export HTTP_CLIENT_TSL_INSECURE=${HTTP_CLIENT_TSL_INSECURE:-false}

# Log HTTP requests
export HTTP_LOG_REQUESTS=${HTTP_LOG_REQUESTS:-true}

# Monitoring log interval
export MONITOR_INTERVAL=${MONITOR_INTERVAL:-"5min"}

# Enable version route
export HTTP_ENABLE_VERSION_ROUTE=${HTTP_ENABLE_VERSION_ROUTE:-true}

# Enable debug route
export HTTP_ENABLE_DEBUG_ROUTE=${HTTP_ENABLE_DEBUG_ROUTE:-false}

###############################################################################
# Database configuration
#
# Database credentials are provided to each environment via
# environment variables, and we offer helper libraries in various languages to
# make it easy to parse. Alternatively, directly parsing those variables is also possible

# DB_DSN is set by parsing $PLATFORM_RELATIONSHIPS with jq
export DB_DSN=$(
    echo $PLATFORM_RELATIONSHIPS | base64 -d | jq -r \
    '.db[0] | 
        .username + ":" + .password + 
        "@tcp(" + .host + ":" + (.port|tostring) + ")" +
        "/corteza?charset=utf8"
    '
)

# Log database queries?
if [ "${PLATFORM_BRANCH}" != "master" ]; then
    export DB_LOGGER=${DB_LOGGER:-true}
else
    export DB_LOGGER=${DB_LOGGER:-false}
fi
