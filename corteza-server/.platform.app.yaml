name: server
type: golang:1.12
disk: 1024

variables:
    env:
        APP: "monolith"
        DST: "bin"

hooks:
    build: |
        set -ue

        ########################################################################
        # Creating the build environment for the server
        # Source: github.com/cortezaproject/corteza-server-builder
        ########################################################################

        ##########
        # Omitting build.d/00-provision
        # Necessary dependencies are already present on build image

        ##########
        # Include dependencies from build.d/10-build-tools

        # Install wait-for-it.sh
        mkdir "${PLATFORM_APP_DIR}/bin"
        echo "Installing wait-for-it.sh..."
        WFI="${PLATFORM_APP_DIR}/bin/wait-for-it.sh"
        wget -q -O ${WFI} https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh
        chmod a+x ${WFI}

        # Install build tools
        echo "Installing overalls..."
        go get -u github.com/go-playground/overalls

        echo "Installing gomock..."
        go get -u github.com/golang/mock/gomock

        echo "Installing mockgen..."
        go get -u github.com/golang/mock/mockgen

        echo "Installing goware/statik..."
        go get -u github.com/goware/statik

        ########################################################################
        # Building the backend server
        # Source: github.com/cortezaproject/corteza-server
        # Following the pattern of Dockerfile.corteza-server
        ########################################################################

        ##########
        # Building the bin
        # Dockerfile: `RUN scripts/builder-make-bin.sh monolith /tmp/corteza-server`
        # Source: scripts/builder-make-bin.sh

        BUILD_TIME=${BUILD_TIME:-$(date +%FT%T%z)}
        GIT_TAG=${GIT_TAG:-"latest"}

        # Create working directory
        mkdir -p "${PLATFORM_APP_DIR}/go/src/github.com/cortezaproject/corteza-server"

        /bin/bash <<-EOF
            shopt -s extglob dotglob
            mv !(${PLATFORM_APP_DIR}/go) "${PLATFORM_APP_DIR}/go/src/github.com/cortezaproject/corteza-server/"
            shopt -u dotglob
        EOF

        cd "${PLATFORM_APP_DIR}/go/src/github.com/cortezaproject/corteza-server/"
        # APP and DST var are now in `variables.env` block above

        LDFLAGS=""
        LDFLAGS="${LDFLAGS} -X github.com/cortezaproject/corteza-server/internal/version.BuildTime=${BUILD_TIME}"
        LDFLAGS="${LDFLAGS} -X github.com/cortezaproject/corteza-server/internal/version.Version=${GIT_TAG}"

        go build -ldflags "${LDFLAGS}" -o "${DST}/corteza-server-${APP}" ./cmd/${APP}/*.go

        ##########
        # Configuring the environment
        # - Data volumes are set below in the `mounts` block
        # - Ports 80 and 443 are automatically exposed
        # - The entrypoint and cmd are defined in the `web.start` block

        #########
        # Move .environment file into place
        mv .env.platformsh .environment

relationships:
    db: "mysqldb:corteza"

mounts:
    'data/compose':
        source: local
        source_path: data_compose
    'data/messaging':
        source: local
        source_path: data_messaging
    'data/system':
        source: local
        source_path: data_system

web:
    upstream:
        socket_family: tcp
        protocol: http
    commands:
        start: ./${DST}/corteza-server-${APP} serve-api
    locations:
        /:
            # This will direct all requests to the server unconditionally
            allow: false
            passthru: true
